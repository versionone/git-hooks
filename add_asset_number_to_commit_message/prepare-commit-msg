#!/usr/bin/env node

/*
	Parse the current branch name for a VersionOne asset number
	and prepend the commit message.
*/

const { readFile, writeFile } = require('fs').promises
const { exec } = require('child_process')
const util = require('util')
const execPromise = util.promisify(exec)

const isComment = line => line[ 0 ] === '#'
const isNotComment = line => !isComment(line)
const _parse = lines => ({
	message: lines.filter(isNotComment).join('\n'),
	comments: lines.filter(isComment).join('\n'),
})
const parse = content => _parse(content.split('\n'))

const assetFormat = /[a-zA-Z]{1,3}-\d{5,}/
const matchText = match => match ? match[ 0 ] : ''
const assetForBranch = symbolicRef => matchText(
	assetFormat.exec(symbolicRef)
)

async function tryGetAssetFromCurrentBranch() {
	const symbolicRef = await tryGetCurrentBranchName()
	return assetForBranch(symbolicRef)
}

async function tryGetCurrentBranchName() {
	try {
		const { stdout: symbolicRef } = await execPromise('git symbolic-ref HEAD')
		return symbolicRef
	}
	catch (e) {
		// git symbolic-ref might fail, don't hold up the commit
	}

	try {
		const { stdout: branchList } = await execPromise('git branch --list --no-color')
		const asterisk = branchList.indexOf('*')
		if (asterisk >= 0) {
			let newline = branchList.indexOf('\n', asterisk + 1)
			if (newline < 0)
				newline = branchList.length
			return branchList.slice(asterisk + 1, newline)
		}
	}
	catch (e) {
		// don't hold up the commit
	}

	return ''
}

async function getMessageAndComments(messageFilename) {
	const originalMessage = await readFile(messageFilename, { encoding: 'utf8' })
	return parse(originalMessage)
}

const references = (message, asset) => message.indexOf(asset) >= 0

const formatMessage = (asset, message, comments) => `[${asset}] ${message.trim()}\n\n${comments.trim()}`

async function main(messageFilename) {
	const [
		asset,
		{ message, comments },
	] = await Promise.all([
		tryGetAssetFromCurrentBranch(),
		getMessageAndComments(messageFilename),
	])

	if (asset && !references(message, asset)) {
		const newMessage = formatMessage(asset, message, comments)
		await writeFile(messageFilename, newMessage, { encoding: 'utf8' })
	}
}

main(...process.argv.slice(2))
